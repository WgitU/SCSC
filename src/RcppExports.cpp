// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// MCMC_full
List MCMC_full(const int n_iter, const int n_save, arma::mat theta_t, arma::mat y_t, arma::mat ind_zero, arma::mat beta_t, arma::mat mu_t, arma::mat Pi_t, arma::uvec ind_stat_cell, arma::vec phi_t, arma::vec n_cell, arma::vec sigma_sq_t, arma::uvec clas_cell_t, arma::vec lambda0_t, arma::vec lambda1_t, arma::uvec S_t, arma::uvec S_vec_t, arma::vec xi_vec_t, arma::vec xi_prime_t, const arma::vec scale_factor_est, double alpha_t, double nu_t, double gam_t, double eta_mu, double tau_sq_mu, double eta_beta, double tau_sq_beta, const int G, const int total_cell_num, const int L, const int K, const int m, double tau_theta, int radius, double lam0_0, double lam1_0, double Sigma2_lam0, double Sigma2_lam1, double sd_lambda0, double sd_lambda1, double a_xi, double b_xi, bool iter_save, int n_threads, int iter_print, bool class_print);
RcppExport SEXP _SCSC_MCMC_full(SEXP n_iterSEXP, SEXP n_saveSEXP, SEXP theta_tSEXP, SEXP y_tSEXP, SEXP ind_zeroSEXP, SEXP beta_tSEXP, SEXP mu_tSEXP, SEXP Pi_tSEXP, SEXP ind_stat_cellSEXP, SEXP phi_tSEXP, SEXP n_cellSEXP, SEXP sigma_sq_tSEXP, SEXP clas_cell_tSEXP, SEXP lambda0_tSEXP, SEXP lambda1_tSEXP, SEXP S_tSEXP, SEXP S_vec_tSEXP, SEXP xi_vec_tSEXP, SEXP xi_prime_tSEXP, SEXP scale_factor_estSEXP, SEXP alpha_tSEXP, SEXP nu_tSEXP, SEXP gam_tSEXP, SEXP eta_muSEXP, SEXP tau_sq_muSEXP, SEXP eta_betaSEXP, SEXP tau_sq_betaSEXP, SEXP GSEXP, SEXP total_cell_numSEXP, SEXP LSEXP, SEXP KSEXP, SEXP mSEXP, SEXP tau_thetaSEXP, SEXP radiusSEXP, SEXP lam0_0SEXP, SEXP lam1_0SEXP, SEXP Sigma2_lam0SEXP, SEXP Sigma2_lam1SEXP, SEXP sd_lambda0SEXP, SEXP sd_lambda1SEXP, SEXP a_xiSEXP, SEXP b_xiSEXP, SEXP iter_saveSEXP, SEXP n_threadsSEXP, SEXP iter_printSEXP, SEXP class_printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type n_save(n_saveSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta_t(theta_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y_t(y_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ind_zero(ind_zeroSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta_t(beta_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu_t(mu_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Pi_t(Pi_tSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ind_stat_cell(ind_stat_cellSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi_t(phi_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n_cell(n_cellSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma_sq_t(sigma_sq_tSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type clas_cell_t(clas_cell_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda0_t(lambda0_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda1_t(lambda1_tSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type S_t(S_tSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type S_vec_t(S_vec_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xi_vec_t(xi_vec_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xi_prime_t(xi_prime_tSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type scale_factor_est(scale_factor_estSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_t(alpha_tSEXP);
    Rcpp::traits::input_parameter< double >::type nu_t(nu_tSEXP);
    Rcpp::traits::input_parameter< double >::type gam_t(gam_tSEXP);
    Rcpp::traits::input_parameter< double >::type eta_mu(eta_muSEXP);
    Rcpp::traits::input_parameter< double >::type tau_sq_mu(tau_sq_muSEXP);
    Rcpp::traits::input_parameter< double >::type eta_beta(eta_betaSEXP);
    Rcpp::traits::input_parameter< double >::type tau_sq_beta(tau_sq_betaSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const int >::type total_cell_num(total_cell_numSEXP);
    Rcpp::traits::input_parameter< const int >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type tau_theta(tau_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< double >::type lam0_0(lam0_0SEXP);
    Rcpp::traits::input_parameter< double >::type lam1_0(lam1_0SEXP);
    Rcpp::traits::input_parameter< double >::type Sigma2_lam0(Sigma2_lam0SEXP);
    Rcpp::traits::input_parameter< double >::type Sigma2_lam1(Sigma2_lam1SEXP);
    Rcpp::traits::input_parameter< double >::type sd_lambda0(sd_lambda0SEXP);
    Rcpp::traits::input_parameter< double >::type sd_lambda1(sd_lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type a_xi(a_xiSEXP);
    Rcpp::traits::input_parameter< double >::type b_xi(b_xiSEXP);
    Rcpp::traits::input_parameter< bool >::type iter_save(iter_saveSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type iter_print(iter_printSEXP);
    Rcpp::traits::input_parameter< bool >::type class_print(class_printSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_full(n_iter, n_save, theta_t, y_t, ind_zero, beta_t, mu_t, Pi_t, ind_stat_cell, phi_t, n_cell, sigma_sq_t, clas_cell_t, lambda0_t, lambda1_t, S_t, S_vec_t, xi_vec_t, xi_prime_t, scale_factor_est, alpha_t, nu_t, gam_t, eta_mu, tau_sq_mu, eta_beta, tau_sq_beta, G, total_cell_num, L, K, m, tau_theta, radius, lam0_0, lam1_0, Sigma2_lam0, Sigma2_lam1, sd_lambda0, sd_lambda1, a_xi, b_xi, iter_save, n_threads, iter_print, class_print));
    return rcpp_result_gen;
END_RCPP
}
// update_mu_R
arma::mat update_mu_R(arma::mat theta_t, arma::mat beta_t, arma::vec sigma_sq_t, arma::vec clas_cell_t, arma::uvec S_vec_t, const int K, const int G, double eta_mu, double tau_sq_mu);
RcppExport SEXP _SCSC_update_mu_R(SEXP theta_tSEXP, SEXP beta_tSEXP, SEXP sigma_sq_tSEXP, SEXP clas_cell_tSEXP, SEXP S_vec_tSEXP, SEXP KSEXP, SEXP GSEXP, SEXP eta_muSEXP, SEXP tau_sq_muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type theta_t(theta_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta_t(beta_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma_sq_t(sigma_sq_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type clas_cell_t(clas_cell_tSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type S_vec_t(S_vec_tSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type eta_mu(eta_muSEXP);
    Rcpp::traits::input_parameter< double >::type tau_sq_mu(tau_sq_muSEXP);
    rcpp_result_gen = Rcpp::wrap(update_mu_R(theta_t, beta_t, sigma_sq_t, clas_cell_t, S_vec_t, K, G, eta_mu, tau_sq_mu));
    return rcpp_result_gen;
END_RCPP
}
// update_Pi_R
arma::mat update_Pi_R(arma::uvec clas_cell_t, arma::vec S_vec_t, arma::vec xi_vec_t, double gam, const int L, const int K);
RcppExport SEXP _SCSC_update_Pi_R(SEXP clas_cell_tSEXP, SEXP S_vec_tSEXP, SEXP xi_vec_tSEXP, SEXP gamSEXP, SEXP LSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type clas_cell_t(clas_cell_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type S_vec_t(S_vec_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xi_vec_t(xi_vec_tSEXP);
    Rcpp::traits::input_parameter< double >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< const int >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Pi_R(clas_cell_t, S_vec_t, xi_vec_t, gam, L, K));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SCSC_MCMC_full", (DL_FUNC) &_SCSC_MCMC_full, 46},
    {"_SCSC_update_mu_R", (DL_FUNC) &_SCSC_update_mu_R, 9},
    {"_SCSC_update_Pi_R", (DL_FUNC) &_SCSC_update_Pi_R, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_SCSC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
